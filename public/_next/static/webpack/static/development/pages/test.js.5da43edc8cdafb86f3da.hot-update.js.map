{"version":3,"file":"static/webpack/static/development/pages/test.js.5da43edc8cdafb86f3da.hot-update.js","sources":["webpack:///./pages/apiComponents/contextJson.js"],"sourcesContent":["import fetch from 'isomorphic-unfetch'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport Image from 'react-bootstrap/Image'\nimport Card from 'react-bootstrap/Card'\nimport Accordion from 'react-bootstrap/Accordion'\n\nconst rowStyle = {\n  paddingButtom: '1rem'\n}\n\n// courses由外部接入，這個值需要由外部接到data後，藉由function return後再重變數傳入\nexport const CourseJson = ({ courses }) => {\n  // API_URL為.env這個檔案中的網址來使用，雖然在這邊並沒有影響，但是如果要使用image這種api匯入的話，就需要指定API_URL\n  const { API_URL } = process.env\n  console.log(courses)\n  return (\n    <>\n      <Row style={rowStyle}>\n        { // if else判斷式，用來避免萬一沒有load到資料時，會報錯，直接顯示loading\n          courses ? courses.map(course => (\n            <Col xs={12} sm={6} md={4} lg={4} xl={3} key={course.id}>\n              <ListGroup variant=\"flush\" >\n                <ListGroup.Item >\n                  {course.title}<br />\n                  <Image  src={API_URL + course.image.url} rounded fluid /><br />\n                  <cite title=\"Source Title\">{course.published}</cite>\n                </ListGroup.Item>\n              </ListGroup>\n            </Col>\n          ))\n          // 如果products不存在，那畫面就顯示Loading...\n          : 'Loading ...'\n        }\n      </Row>\n    </>\n  )\n}\n\n// products由外部接入，這個值需要由data傳入\nexport const ProductJson = ({ products }) => {\n  // API_URL為.env這個檔案中的網址來使用，雖然在這邊並沒有影響，但是如果要使用image這種api匯入的話，就需要指定API_URL\n  const { API_URL } = process.env\n  console.log(products)\n  return (\n    <>\n      <Row style={rowStyle}>\n        { // if else判斷式，用來避免萬一沒有load到資料時，會報錯，直接顯示loading\n          products ? products.map(product => (\n            <Col xs={12} sm={12} md={12} lg={12} xl={12} key={product.id}>\n              <Accordion defaultActiveKey='false'>\n                <Card>\n                  <Accordion.Toggle as={Card.Header} eventKey={product.id}>\n                    {product.title}\n                  </Accordion.Toggle>\n                  <Accordion.Collapse eventKey={product.id}>\n                    <Card.Body>\n                      {product.description}<br /><br />\n                      Price:{product.price}<br />\n                      <cite title=\"Source Title\">Quality:{product.quality}</cite>\n                    </Card.Body>\n                  </Accordion.Collapse>\n                </Card>\n              </Accordion>\n            </Col>\n          ))\n          // 如果products不存在，那畫面就顯示Loading...\n          : 'Loading ...'\n        }\n      </Row>\n    </>\n  )\n}\n\n// categories由外部接入，這個值需要由外部接到data後，藉由function return後再重變數傳入\nexport const CategoryJson = ({ categories }) => {\n  // API_URL為.env這個檔案中的網址來使用，雖然在這邊並沒有影響，但是如果要使用image這種api匯入的話，就需要指定API_URL\n  const { API_URL } = process.env\n  console.log(categories)\n  return (\n    <>\n      <Row style={rowStyle}>\n        { // if else判斷式，用來避免萬一沒有load到資料時，會報錯，直接顯示loading\n          categories ? categories.map(category => (\n            <Col xs={12} sm={12} md={12} lg={6} xl={6} key={category.id}>\n              <ListGroup variant=\"flush\" >\n                <ListGroup.Item >\n                  {category.name}<br />\n                  <cite title=\"Source Title\">{category.created_at}</cite>\n                </ListGroup.Item>\n              </ListGroup>\n            </Col>\n          ))\n          // 如果products不存在，那畫面就顯示Loading...\n          : 'Loading'\n        }\n      </Row>\n    </>\n  )\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AACA;AAIA;AAAA;AACA;AADA;AAGA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAiwBA;AACA;AAEA;AAAA;AACA;AADA;AAGA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;AAgBA;;;;A","sourceRoot":""}