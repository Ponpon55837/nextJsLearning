{"version":3,"file":"static/webpack/static/development/pages/test.js.d695a693ea049d975d9d.hot-update.js","sources":["webpack:///./pages/apiComponents/contextJson.js"],"sourcesContent":["import fetch from 'isomorphic-unfetch'\nimport { rowStyle } from '../../styles/utilStyle.js'\nimport utilStyle from '../../styles/utils.module.css'\nimport { API_URL } from './functionContextJson.js'\nimport { Col, Row, ListGroup, Image, Card, Accordion } from 'react-bootstrap'\n\n// courses由外部接入，這個值需要由外部接到data後，藉由function return後再重變數傳入\nexport const CourseJson = ({ courses }) => {\n\n  console.log(courses)\n  return (\n    <>\n      <Row style={rowStyle}>\n        { // 如果products不存在，那畫面就顯示Loading...\n          !courses ? 'Loading ...' :\n          // if else判斷式，用來避免萬一沒有load到資料時，會報錯，直接顯示loading\n          courses.map(course => (\n            <Col xs={12} sm={6} md={4} lg={4} xl={3} key={course.id}>\n              <ListGroup variant=\"flush\" >\n                <ListGroup.Item className={utilStyle.courseListGroupItem}>\n                  <div className={utilStyle.courseDiv}>{course.title}</div><br />\n                  <Image className={utilStyle.courseIMG}  src={ !(API_URL + course.image.url) ? null : API_URL + course.image.url} rounded fluid /><br />\n                  <cite title=\"Source Title\">{course.published}</cite>\n                </ListGroup.Item>\n              </ListGroup>\n            </Col>\n          ))\n        }\n      </Row>\n    </>\n  )\n}\n\n// products由外部接入，這個值需要由data傳入\nexport const ProductJson = ({ products }) => {\n  console.log(products)\n  return (\n    <>\n      <Row style={rowStyle}>\n        { // 如果products不存在，那畫面就顯示Loading...\n          !products ? 'Loading ...' :\n          // if else判斷式，用來避免萬一沒有load到資料時，會報錯，直接顯示loading\n          products.map(product => (\n            <Col xs={12} sm={12} md={12} lg={12} xl={12} key={product.id}>\n              <Accordion defaultActiveKey='false'>\n                <Card>\n                  <Accordion.Toggle as={Card.Header} eventKey={product.id}>\n                    {product.title}\n                  </Accordion.Toggle>\n                  <Accordion.Collapse eventKey={product.id}>\n                    <Card.Body>\n                      {product.description}<br /><br />\n                      {\n                        // 判斷式先去看在product底下categories下面的陣列存不存在，使用[0]代表這個陣列的第一項，因為每一個product底下的categories都是獨立存在的，所以除非有同一個product.categories下面有一個以上陣列才要用0以上的數字\n                        // 如果陣列不存在清空位置，存在的話才顯示內容\n                        console.log(product.categories[0].id),\n                        !product.categories[0].id ? null :\n                        `Price:` + product.price }<br />\n                      {\n                        !product.categories[0].id ? null :\n                        `Category:` + product.categories[0].name }<br />\n                      { !product.categories[0].id ? null :\n                        `Quality:` + product.quality }<br />\n                      {\n                        !product.categories[0].id == 1 ? null :\n                        `Create_at:` + product.categories[0].created_at }\n                    </Card.Body>\n                  </Accordion.Collapse>\n                </Card>\n              </Accordion>\n            </Col>\n          ))\n        }\n      </Row>\n    </>\n  )\n}\n\n// categories由外部接入，這個值需要由外部接到data後，藉由function return後再重變數傳入\nexport const CategoryJson = ({ categories }) => {\n\n  console.log(categories)\n  return (\n    <>\n      <Row style={rowStyle}>\n        {\n          // 如果products不存在，那畫面就顯示Loading...\n          !categories ? 'Loading ...' :\n          // if else判斷式，用來避免萬一沒有load到資料時，會報錯，直接顯示loading\n          categories.map(category => (\n            <Col xs={12} sm={12} md={12} lg={6} xl={6} key={category.id}>\n              <ListGroup variant=\"flush\" >\n                <ListGroup.Item >\n                  {category.name}<br />\n                  <cite title=\"Source Title\">{category.created_at}</cite>\n                </ListGroup.Item>\n              </ListGroup>\n            </Col>\n          ))\n        }\n      </Row>\n    </>\n  )\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAepBA;AAkCA;AACA;AAEA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAcA;;;;A","sourceRoot":""}